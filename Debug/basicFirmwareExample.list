
basicFirmwareExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014d8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001684  08001684  00002684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001694  08001694  00003020  2**0
                  CONTENTS
  4 .ARM          00000008  08001694  08001694  00002694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800169c  0800169c  00003020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800169c  0800169c  0000269c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016a0  080016a0  000026a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080016a4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003020  2**0
                  CONTENTS
 10 .bss          00000164  20000020  20000020  00003020  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000184  20000184  00003020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009913  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016ea  00000000  00000000  0000c963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00003eac  00000000  00000000  0000e04d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000568  00000000  00000000  00011f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006a6  00000000  00000000  00012468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002273a  00000000  00000000  00012b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a8c3  00000000  00000000  00035248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d188d  00000000  00000000  0003fb0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00111398  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00000dd4  00000000  00000000  001113dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006b  00000000  00000000  001121b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000020 	.word	0x20000020
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800166c 	.word	0x0800166c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000024 	.word	0x20000024
 80001e8:	0800166c 	.word	0x0800166c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	2300      	movs	r3, #0
{
 80004e0:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 80004e6:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ea:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80004ee:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f2:	4a21      	ldr	r2, [pc, #132]	@ (8000578 <SystemClock_Config+0x9c>)
 80004f4:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fa:	6c10      	ldr	r0, [r2, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004fc:	491f      	ldr	r1, [pc, #124]	@ (800057c <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000502:	6410      	str	r0, [r2, #64]	@ 0x40
 8000504:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000506:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800050a:	9201      	str	r2, [sp, #4]
 800050c:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800050e:	9302      	str	r3, [sp, #8]
 8000510:	680a      	ldr	r2, [r1, #0]
 8000512:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8000516:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800051a:	600a      	str	r2, [r1, #0]
 800051c:	680a      	ldr	r2, [r1, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800051e:	930f      	str	r3, [sp, #60]	@ 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000520:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000524:	2310      	movs	r3, #16
 8000526:	2101      	movs	r1, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000528:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052a:	e9cd 130b 	strd	r1, r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800052e:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000530:	2332      	movs	r3, #50	@ 0x32
 8000532:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000536:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000538:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800053a:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800053c:	2204      	movs	r2, #4
 800053e:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000540:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000542:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000546:	940e      	str	r4, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000548:	f000 fc68 	bl	8000e1c <HAL_RCC_OscConfig>
 800054c:	b108      	cbz	r0, 8000552 <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800054e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000550:	e7fe      	b.n	8000550 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	230f      	movs	r3, #15
 8000554:	4601      	mov	r1, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000556:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800055a:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800055e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000562:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000564:	e9cd 1205 	strd	r1, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000568:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800056a:	f000 fe6d 	bl	8001248 <HAL_RCC_ClockConfig>
 800056e:	b108      	cbz	r0, 8000574 <SystemClock_Config+0x98>
 8000570:	b672      	cpsid	i
  while (1)
 8000572:	e7fe      	b.n	8000572 <SystemClock_Config+0x96>
}
 8000574:	b014      	add	sp, #80	@ 0x50
 8000576:	bd10      	pop	{r4, pc}
 8000578:	40023800 	.word	0x40023800
 800057c:	40007000 	.word	0x40007000

08000580 <main>:
{
 8000580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	2500      	movs	r5, #0
{
 8000586:	b08f      	sub	sp, #60	@ 0x3c
	HAL_Init();
 8000588:	f000 fa78 	bl	8000a7c <HAL_Init>
	SystemClock_Config();
 800058c:	f7ff ffa6 	bl	80004dc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8000594:	e9cd 550a 	strd	r5, r5, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000598:	4bb9      	ldr	r3, [pc, #740]	@ (8000880 <main+0x300>)
 800059a:	9500      	str	r5, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	950c      	str	r5, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80005a0:	48b8      	ldr	r0, [pc, #736]	@ (8000884 <main+0x304>)
 80005a2:	4fb9      	ldr	r7, [pc, #740]	@ (8000888 <main+0x308>)
		HAL_UART_Transmit( &huart1, (uint8_t*)__prompt, sizeof(__prompt)-1, 100 );
 80005a4:	4cb9      	ldr	r4, [pc, #740]	@ (800088c <main+0x30c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	f042 0204 	orr.w	r2, r2, #4
 80005aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80005ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ae:	f002 0204 	and.w	r2, r2, #4
 80005b2:	9200      	str	r2, [sp, #0]
 80005b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005b6:	9501      	str	r5, [sp, #4]
 80005b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ba:	f042 0220 	orr.w	r2, r2, #32
 80005be:	631a      	str	r2, [r3, #48]	@ 0x30
 80005c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005c2:	f002 0220 	and.w	r2, r2, #32
 80005c6:	9201      	str	r2, [sp, #4]
 80005c8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ca:	9502      	str	r5, [sp, #8]
 80005cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80005d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80005d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005d6:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80005da:	9202      	str	r2, [sp, #8]
 80005dc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	9503      	str	r5, [sp, #12]
 80005e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005e2:	f042 0201 	orr.w	r2, r2, #1
 80005e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ea:	f002 0201 	and.w	r2, r2, #1
 80005ee:	9203      	str	r2, [sp, #12]
 80005f0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	9504      	str	r5, [sp, #16]
 80005f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005f6:	f042 0202 	orr.w	r2, r2, #2
 80005fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80005fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005fe:	f002 0202 	and.w	r2, r2, #2
 8000602:	9204      	str	r2, [sp, #16]
 8000604:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000606:	9505      	str	r5, [sp, #20]
 8000608:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800060a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800060e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000610:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000612:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000616:	9205      	str	r2, [sp, #20]
 8000618:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800061a:	9506      	str	r5, [sp, #24]
 800061c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800061e:	f042 0210 	orr.w	r2, r2, #16
 8000622:	631a      	str	r2, [r3, #48]	@ 0x30
 8000624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000626:	f002 0210 	and.w	r2, r2, #16
 800062a:	9206      	str	r2, [sp, #24]
 800062c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062e:	9507      	str	r5, [sp, #28]
 8000630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000632:	f042 0208 	orr.w	r2, r2, #8
 8000636:	631a      	str	r2, [r3, #48]	@ 0x30
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800063e:	2116      	movs	r1, #22
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000640:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000642:	462a      	mov	r2, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000644:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000646:	f000 fbe5 	bl	8000e14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800064a:	4891      	ldr	r0, [pc, #580]	@ (8000890 <main+0x310>)
 800064c:	462a      	mov	r2, r5
 800064e:	2180      	movs	r1, #128	@ 0x80
 8000650:	f000 fbe0 	bl	8000e14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000654:	488f      	ldr	r0, [pc, #572]	@ (8000894 <main+0x314>)
 8000656:	462a      	mov	r2, r5
 8000658:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800065c:	f000 fbda 	bl	8000e14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000660:	462a      	mov	r2, r5
 8000662:	488d      	ldr	r0, [pc, #564]	@ (8000898 <main+0x318>)
 8000664:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000668:	2602      	movs	r6, #2
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800066a:	f000 fbd3 	bl	8000e14 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800066e:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000672:	f04f 080c 	mov.w	r8, #12
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000676:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800067a:	4888      	ldr	r0, [pc, #544]	@ (800089c <main+0x31c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800067c:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000680:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	e9cd 3608 	strd	r3, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000686:	e9cd 590a 	strd	r5, r9, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800068a:	f000 fa8b 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800068e:	f44f 7360 	mov.w	r3, #896	@ 0x380
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000692:	4882      	ldr	r0, [pc, #520]	@ (800089c <main+0x31c>)
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000694:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000696:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000698:	2305      	movs	r3, #5
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800069a:	f04f 0a0e 	mov.w	sl, #14
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800069e:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006a6:	f000 fa7d 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80006aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80006ae:	487b      	ldr	r0, [pc, #492]	@ (800089c <main+0x31c>)
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80006b0:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80006b2:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80006b4:	f04f 0b01 	mov.w	fp, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	950b      	str	r5, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80006be:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f000 fa6f 	bl	8000ba4 <HAL_GPIO_Init>
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80006c6:	486f      	ldr	r0, [pc, #444]	@ (8000884 <main+0x304>)
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80006c8:	f8cd b020 	str.w	fp, [sp, #32]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80006cc:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006d2:	e9cd 980b 	strd	r9, r8, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80006d6:	f000 fa65 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80006da:	2316      	movs	r3, #22
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006dc:	4869      	ldr	r0, [pc, #420]	@ (8000884 <main+0x304>)
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80006de:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e0:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	e9cd b509 	strd	fp, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e8:	f000 fa5c 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80006ec:	f248 0207 	movw	r2, #32775	@ 0x8007
 80006f0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	4866      	ldr	r0, [pc, #408]	@ (8000890 <main+0x310>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80006fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f000 fa51 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000702:	f641 0358 	movw	r3, #6232	@ 0x1858
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	4862      	ldr	r0, [pc, #392]	@ (8000890 <main+0x310>)
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000708:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000710:	e9cd 5a0b 	strd	r5, sl, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f000 fa46 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000718:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800071a:	485d      	ldr	r0, [pc, #372]	@ (8000890 <main+0x310>)
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800071c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800071e:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	e9cd b509 	strd	fp, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000726:	f000 fa3d 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800072a:	2220      	movs	r2, #32
 800072c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000730:	4854      	ldr	r0, [pc, #336]	@ (8000884 <main+0x304>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000734:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000736:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800073a:	f000 fa33 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800073e:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	4857      	ldr	r0, [pc, #348]	@ (80008a0 <main+0x320>)
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000742:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000744:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	e9cd 9608 	strd	r9, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	e9cd 550a 	strd	r5, r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074e:	f000 fa29 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000752:	2204      	movs	r2, #4
 8000754:	2300      	movs	r3, #0
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000756:	4852      	ldr	r0, [pc, #328]	@ (80008a0 <main+0x320>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800075a:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800075c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000760:	f000 fa20 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000764:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000768:	484b      	ldr	r0, [pc, #300]	@ (8000898 <main+0x318>)
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800076a:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800076c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000772:	e9cd 980b 	strd	r9, r8, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000776:	f000 fa15 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800077a:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800077e:	4849      	ldr	r0, [pc, #292]	@ (80008a4 <main+0x324>)
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000780:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000782:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000788:	e9cd 980b 	strd	r9, r8, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800078c:	f000 fa0a 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000790:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	4842      	ldr	r0, [pc, #264]	@ (80008a0 <main+0x320>)
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000796:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000798:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800079e:	e9cd 5a0b 	strd	r5, sl, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a2:	f000 f9ff 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80007a6:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	483d      	ldr	r0, [pc, #244]	@ (80008a0 <main+0x320>)
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80007ac:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ae:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80007b4:	e9cd 580b 	strd	r5, r8, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b8:	f000 f9f4 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80007bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007c0:	2300      	movs	r3, #0
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80007c2:	4837      	ldr	r0, [pc, #220]	@ (80008a0 <main+0x320>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80007c6:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80007c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f000 f9ea 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80007d0:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d4:	482f      	ldr	r0, [pc, #188]	@ (8000894 <main+0x314>)
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80007d6:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d8:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007de:	e9cd 980b 	strd	r9, r8, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e2:	f000 f9df 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TE_Pin;
 80007e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007ea:	2300      	movs	r3, #0
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80007ec:	4829      	ldr	r0, [pc, #164]	@ (8000894 <main+0x314>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80007f0:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = TE_Pin;
 80007f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f000 f9d5 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80007fa:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007fe:	4825      	ldr	r0, [pc, #148]	@ (8000894 <main+0x314>)
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000800:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000802:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	e9cd b509 	strd	fp, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800080a:	f000 f9cb 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800080e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000812:	4821      	ldr	r0, [pc, #132]	@ (8000898 <main+0x318>)
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000814:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000816:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800081c:	e9cd 5a0b 	strd	r5, sl, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000820:	f000 f9c0 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000824:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000828:	4816      	ldr	r0, [pc, #88]	@ (8000884 <main+0x304>)
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800082a:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000832:	e9cd 5a0b 	strd	r5, sl, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000836:	f000 f9b5 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083a:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000840:	2304      	movs	r3, #4
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000842:	4810      	ldr	r0, [pc, #64]	@ (8000884 <main+0x304>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000844:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000846:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000848:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800084c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000850:	f000 f9a8 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000854:	2312      	movs	r3, #18
 8000856:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000858:	2304      	movs	r3, #4
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800085a:	480d      	ldr	r0, [pc, #52]	@ (8000890 <main+0x310>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800085c:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800085e:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000860:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000864:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	e9cd 550a 	strd	r5, r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800086a:	f000 f99b 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800086e:	2348      	movs	r3, #72	@ 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000870:	4808      	ldr	r0, [pc, #32]	@ (8000894 <main+0x314>)
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000872:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000874:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800087a:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 800087e:	e013      	b.n	80008a8 <main+0x328>
 8000880:	40023800 	.word	0x40023800
 8000884:	40020800 	.word	0x40020800
 8000888:	2000003c 	.word	0x2000003c
 800088c:	2000013c 	.word	0x2000013c
 8000890:	40020000 	.word	0x40020000
 8000894:	40020c00 	.word	0x40020c00
 8000898:	40021800 	.word	0x40021800
 800089c:	40021400 	.word	0x40021400
 80008a0:	40020400 	.word	0x40020400
 80008a4:	40021000 	.word	0x40021000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008aa:	f000 f97b 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80008ae:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b0:	482a      	ldr	r0, [pc, #168]	@ (800095c <main+0x3dc>)
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80008b2:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b4:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80008b6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008ba:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008c2:	f000 f96f 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80008c6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ca:	4824      	ldr	r0, [pc, #144]	@ (800095c <main+0x3dc>)
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80008cc:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ce:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	e9cd b509 	strd	fp, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008d6:	f000 f965 	bl	8000ba4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80008da:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008dc:	4820      	ldr	r0, [pc, #128]	@ (8000960 <main+0x3e0>)
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80008de:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008e6:	e9cd 980b 	strd	r9, r8, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ea:	f000 f95b 	bl	8000ba4 <HAL_GPIO_Init>
		HAL_UART_Transmit( &huart1, (uint8_t*)__prompt, sizeof(__prompt)-1, 100 );
 80008ee:	491d      	ldr	r1, [pc, #116]	@ (8000964 <main+0x3e4>)
 80008f0:	2364      	movs	r3, #100	@ 0x64
 80008f2:	2211      	movs	r2, #17
 80008f4:	4620      	mov	r0, r4
 80008f6:	f000 fd45 	bl	8001384 <HAL_UART_Transmit>
		while( waitingForMessage )
 80008fa:	2500      	movs	r5, #0
			if( HAL_OK == HAL_UART_Receive( &huart1, &byte, 1, 100 ) )
 80008fc:	2364      	movs	r3, #100	@ 0x64
 80008fe:	2201      	movs	r2, #1
 8000900:	a908      	add	r1, sp, #32
 8000902:	4620      	mov	r0, r4
 8000904:	f000 fdee 	bl	80014e4 <HAL_UART_Receive>
 8000908:	2800      	cmp	r0, #0
 800090a:	d1f7      	bne.n	80008fc <main+0x37c>
				switch( byte ){
 800090c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8000910:	2b0d      	cmp	r3, #13
						__rxBuffer[rxBufferIndex++] = byte;
 8000912:	f105 0201 	add.w	r2, r5, #1
				switch( byte ){
 8000916:	d006      	beq.n	8000926 <main+0x3a6>
 8000918:	2b7f      	cmp	r3, #127	@ 0x7f
 800091a:	d018      	beq.n	800094e <main+0x3ce>
 800091c:	2b0a      	cmp	r3, #10
 800091e:	d002      	beq.n	8000926 <main+0x3a6>
						__rxBuffer[rxBufferIndex++] = byte;
 8000920:	557b      	strb	r3, [r7, r5]
 8000922:	b295      	uxth	r5, r2
 8000924:	e7ea      	b.n	80008fc <main+0x37c>
						if( rxBufferIndex ){
 8000926:	2d00      	cmp	r5, #0
 8000928:	d0e8      	beq.n	80008fc <main+0x37c>
		byte = 0;
 800092a:	2100      	movs	r1, #0
		memset( __rxBuffer, 0, sizeof(__rxBuffer));
 800092c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000930:	480d      	ldr	r0, [pc, #52]	@ (8000968 <main+0x3e8>)
		byte = 0;
 8000932:	f88d 1020 	strb.w	r1, [sp, #32]
		memset( __rxBuffer, 0, sizeof(__rxBuffer));
 8000936:	f000 fe6d 	bl	8001614 <memset>
 800093a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
		while( waitingForMessage )
 800093e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
			__NOP();
 8000942:	bf00      	nop
		for( j = 0; j<1000; j++ )
 8000944:	3b01      	subs	r3, #1
 8000946:	d1fc      	bne.n	8000942 <main+0x3c2>
	for( i = 0; i < milliseconds; i++ )
 8000948:	3a01      	subs	r2, #1
 800094a:	d1f8      	bne.n	800093e <main+0x3be>
 800094c:	e7cf      	b.n	80008ee <main+0x36e>
							__rxBuffer[--rxBufferIndex] = 0;
 800094e:	1e6b      	subs	r3, r5, #1
						if( rxBufferIndex ){
 8000950:	2d00      	cmp	r5, #0
 8000952:	d0d3      	beq.n	80008fc <main+0x37c>
							__rxBuffer[--rxBufferIndex] = 0;
 8000954:	b29d      	uxth	r5, r3
 8000956:	5578      	strb	r0, [r7, r5]
 8000958:	e7d0      	b.n	80008fc <main+0x37c>
 800095a:	bf00      	nop
 800095c:	40021800 	.word	0x40021800
 8000960:	40020400 	.word	0x40020400
 8000964:	20000000 	.word	0x20000000
 8000968:	2000003c 	.word	0x2000003c

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <HAL_MspInit+0x38>)
 8000970:	2100      	movs	r1, #0
 8000972:	9100      	str	r1, [sp, #0]
 8000974:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000976:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800097a:	645a      	str	r2, [r3, #68]	@ 0x44
 800097c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800097e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000982:	9200      	str	r2, [sp, #0]
 8000984:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	9101      	str	r1, [sp, #4]
 8000988:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800098a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800098e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800099a:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099c:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800099e:	f000 b899 	b.w	8000ad4 <HAL_NVIC_SetPriorityGrouping>
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler>
 80009aa:	bf00      	nop

080009ac <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <HardFault_Handler>
 80009ae:	bf00      	nop

080009b0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler>
 80009b2:	bf00      	nop

080009b4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <BusFault_Handler>
 80009b6:	bf00      	nop

080009b8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler>
 80009ba:	bf00      	nop

080009bc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop

080009c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 b872 	b.w	8000ab0 <HAL_IncTick>

080009cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009cc:	4a03      	ldr	r2, [pc, #12]	@ (80009dc <SystemInit+0x10>)
 80009ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80009d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80009e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a18 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e4:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009e6:	490e      	ldr	r1, [pc, #56]	@ (8000a20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009e8:	4a0e      	ldr	r2, [pc, #56]	@ (8000a24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000a28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009fc:	4c0b      	ldr	r4, [pc, #44]	@ (8000a2c <LoopFillZerobss+0x26>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a0a:	f7ff ffdf 	bl	80009cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f000 fe09 	bl	8001624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a12:	f7ff fdb5 	bl	8000580 <main>
  bx  lr    
 8000a16:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a18:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000a24:	080016a4 	.word	0x080016a4
  ldr r2, =_sbss
 8000a28:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000a2c:	20000184 	.word	0x20000184

08000a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC_IRQHandler>
	...

08000a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a36:	4a0e      	ldr	r2, [pc, #56]	@ (8000a70 <HAL_InitTick+0x3c>)
 8000a38:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <HAL_InitTick+0x40>)
 8000a3a:	7812      	ldrb	r2, [r2, #0]
 8000a3c:	681b      	ldr	r3, [r3, #0]
{
 8000a3e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a44:	fbb0 f0f2 	udiv	r0, r0, r2
 8000a48:	fbb3 f0f0 	udiv	r0, r3, r0
 8000a4c:	f000 f890 	bl	8000b70 <HAL_SYSTICK_Config>
 8000a50:	b908      	cbnz	r0, 8000a56 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	2d0f      	cmp	r5, #15
 8000a54:	d901      	bls.n	8000a5a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000a56:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000a58:	bd38      	pop	{r3, r4, r5, pc}
 8000a5a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	4629      	mov	r1, r5
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f000 f848 	bl	8000af8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a68:	4b03      	ldr	r3, [pc, #12]	@ (8000a78 <HAL_InitTick+0x44>)
 8000a6a:	4620      	mov	r0, r4
 8000a6c:	601d      	str	r5, [r3, #0]
}
 8000a6e:	bd38      	pop	{r3, r4, r5, pc}
 8000a70:	20000018 	.word	0x20000018
 8000a74:	20000014 	.word	0x20000014
 8000a78:	2000001c 	.word	0x2000001c

08000a7c <HAL_Init>:
{
 8000a7c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <HAL_Init+0x30>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000a86:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a8e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000a96:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f81b 	bl	8000ad4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ffc8 	bl	8000a34 <HAL_InitTick>
  HAL_MspInit();
 8000aa4:	f7ff ff62 	bl	800096c <HAL_MspInit>
}
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	bd08      	pop	{r3, pc}
 8000aac:	40023c00 	.word	0x40023c00

08000ab0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ab0:	4a03      	ldr	r2, [pc, #12]	@ (8000ac0 <HAL_IncTick+0x10>)
 8000ab2:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <HAL_IncTick+0x14>)
 8000ab4:	6811      	ldr	r1, [r2, #0]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	440b      	add	r3, r1
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000180 	.word	0x20000180
 8000ac4:	20000018 	.word	0x20000018

08000ac8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ac8:	4b01      	ldr	r3, [pc, #4]	@ (8000ad0 <HAL_GetTick+0x8>)
 8000aca:	6818      	ldr	r0, [r3, #0]
}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000180 	.word	0x20000180

08000ad4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad4:	4907      	ldr	r1, [pc, #28]	@ (8000af4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ad6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ada:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ade:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae6:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000aee:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <HAL_NVIC_SetPriority+0x70>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b00:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b02:	f1c3 0e07 	rsb	lr, r3, #7
 8000b06:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0e:	bf28      	it	cs
 8000b10:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b14:	f1bc 0f06 	cmp.w	ip, #6
 8000b18:	d91c      	bls.n	8000b54 <HAL_NVIC_SetPriority+0x5c>
 8000b1a:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	fa03 f30c 	lsl.w	r3, r3, ip
 8000b26:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2e:	fa03 f30e 	lsl.w	r3, r3, lr
 8000b32:	ea21 0303 	bic.w	r3, r1, r3
 8000b36:	fa03 f30c 	lsl.w	r3, r3, ip
 8000b3a:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3c:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8000b3e:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000b42:	db0a      	blt.n	8000b5a <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b44:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000b48:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000b4c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b50:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b54:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	4694      	mov	ip, r2
 8000b58:	e7e7      	b.n	8000b2a <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5a:	4a04      	ldr	r2, [pc, #16]	@ (8000b6c <HAL_NVIC_SetPriority+0x74>)
 8000b5c:	f000 000f 	and.w	r0, r0, #15
 8000b60:	4402      	add	r2, r0
 8000b62:	7613      	strb	r3, [r2, #24]
 8000b64:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b68:	e000ed00 	.word	0xe000ed00
 8000b6c:	e000ecfc 	.word	0xe000ecfc

08000b70 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b70:	3801      	subs	r0, #1
 8000b72:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b76:	d301      	bcc.n	8000b7c <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b78:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b7a:	4770      	bx	lr
{
 8000b7c:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b82:	4c07      	ldr	r4, [pc, #28]	@ (8000ba0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b84:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b86:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8000b8a:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b90:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b92:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b94:	619a      	str	r2, [r3, #24]
}
 8000b96:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9a:	6119      	str	r1, [r3, #16]
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ba8:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000baa:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8000df4 <HAL_GPIO_Init+0x250>
{
 8000bb0:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 8000bb2:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bb6:	4689      	mov	r9, r1
 8000bb8:	e003      	b.n	8000bc2 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bba:	3301      	adds	r3, #1
 8000bbc:	2b10      	cmp	r3, #16
 8000bbe:	f000 809c 	beq.w	8000cfa <HAL_GPIO_Init+0x156>
    ioposition = 0x01U << position;
 8000bc2:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bc6:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8000bca:	43a2      	bics	r2, r4
 8000bcc:	d1f5      	bne.n	8000bba <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bce:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8000bd2:	f001 0203 	and.w	r2, r1, #3
 8000bd6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bda:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bdc:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bde:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000be2:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000be4:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000be8:	f240 808a 	bls.w	8000d00 <HAL_GPIO_Init+0x15c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bec:	2a03      	cmp	r2, #3
 8000bee:	f040 80c0 	bne.w	8000d72 <HAL_GPIO_Init+0x1ce>
      temp = GPIOx->MODER;
 8000bf2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bf4:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bf8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bfa:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bfc:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8000c00:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c02:	d0da      	beq.n	8000bba <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c04:	2200      	movs	r2, #0
 8000c06:	9203      	str	r2, [sp, #12]
 8000c08:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8000c0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000c10:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8000c14:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8000c18:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000c1c:	9203      	str	r2, [sp, #12]
 8000c1e:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c20:	f023 0203 	bic.w	r2, r3, #3
 8000c24:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c28:	f003 0703 	and.w	r7, r3, #3
 8000c2c:	260f      	movs	r6, #15
 8000c2e:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8000c32:	00bf      	lsls	r7, r7, #2
 8000c34:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c38:	4e6b      	ldr	r6, [pc, #428]	@ (8000de8 <HAL_GPIO_Init+0x244>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c3a:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c3c:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c3e:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c42:	d031      	beq.n	8000ca8 <HAL_GPIO_Init+0x104>
 8000c44:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8000c48:	42b0      	cmp	r0, r6
 8000c4a:	f000 809d 	beq.w	8000d88 <HAL_GPIO_Init+0x1e4>
 8000c4e:	4e67      	ldr	r6, [pc, #412]	@ (8000dec <HAL_GPIO_Init+0x248>)
 8000c50:	42b0      	cmp	r0, r6
 8000c52:	f000 809f 	beq.w	8000d94 <HAL_GPIO_Init+0x1f0>
 8000c56:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8000df8 <HAL_GPIO_Init+0x254>
 8000c5a:	4560      	cmp	r0, ip
 8000c5c:	f000 80a0 	beq.w	8000da0 <HAL_GPIO_Init+0x1fc>
 8000c60:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8000dfc <HAL_GPIO_Init+0x258>
 8000c64:	4560      	cmp	r0, ip
 8000c66:	f000 80a1 	beq.w	8000dac <HAL_GPIO_Init+0x208>
 8000c6a:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8000e00 <HAL_GPIO_Init+0x25c>
 8000c6e:	4560      	cmp	r0, ip
 8000c70:	f000 80a8 	beq.w	8000dc4 <HAL_GPIO_Init+0x220>
 8000c74:	f8df c18c 	ldr.w	ip, [pc, #396]	@ 8000e04 <HAL_GPIO_Init+0x260>
 8000c78:	4560      	cmp	r0, ip
 8000c7a:	f000 80a9 	beq.w	8000dd0 <HAL_GPIO_Init+0x22c>
 8000c7e:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8000e08 <HAL_GPIO_Init+0x264>
 8000c82:	4560      	cmp	r0, ip
 8000c84:	f000 8098 	beq.w	8000db8 <HAL_GPIO_Init+0x214>
 8000c88:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8000e0c <HAL_GPIO_Init+0x268>
 8000c8c:	4560      	cmp	r0, ip
 8000c8e:	f000 80a5 	beq.w	8000ddc <HAL_GPIO_Init+0x238>
 8000c92:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 8000e10 <HAL_GPIO_Init+0x26c>
 8000c96:	4560      	cmp	r0, ip
 8000c98:	bf0c      	ite	eq
 8000c9a:	f04f 0c09 	moveq.w	ip, #9
 8000c9e:	f04f 0c0a 	movne.w	ip, #10
 8000ca2:	fa0c f707 	lsl.w	r7, ip, r7
 8000ca6:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ca8:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000caa:	4a51      	ldr	r2, [pc, #324]	@ (8000df0 <HAL_GPIO_Init+0x24c>)
 8000cac:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cae:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8000cb0:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000cb4:	4e4e      	ldr	r6, [pc, #312]	@ (8000df0 <HAL_GPIO_Init+0x24c>)
        temp &= ~((uint32_t)iocurrent);
 8000cb6:	bf54      	ite	pl
 8000cb8:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8000cba:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8000cbe:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8000cc0:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000cc2:	4e4b      	ldr	r6, [pc, #300]	@ (8000df0 <HAL_GPIO_Init+0x24c>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cc4:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 8000cc6:	bf54      	ite	pl
 8000cc8:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8000cca:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8000cce:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8000cd0:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cd2:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000cd4:	4e46      	ldr	r6, [pc, #280]	@ (8000df0 <HAL_GPIO_Init+0x24c>)
        temp &= ~((uint32_t)iocurrent);
 8000cd6:	bf54      	ite	pl
 8000cd8:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8000cda:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8000cde:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ce0:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ce2:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ce4:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000ce8:	4941      	ldr	r1, [pc, #260]	@ (8000df0 <HAL_GPIO_Init+0x24c>)
        temp &= ~((uint32_t)iocurrent);
 8000cea:	bf54      	ite	pl
 8000cec:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8000cee:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cf2:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8000cf4:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cf6:	f47f af64 	bne.w	8000bc2 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8000cfa:	b005      	add	sp, #20
 8000cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8000d00:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d02:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d06:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8000d0a:	fa07 f70c 	lsl.w	r7, r7, ip
 8000d0e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000d12:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d14:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d16:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d1a:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8000d1e:	409f      	lsls	r7, r3
 8000d20:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000d24:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000d26:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d28:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d2c:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8000d30:	fa07 f70c 	lsl.w	r7, r7, ip
 8000d34:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d38:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8000d3a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3c:	f47f af59 	bne.w	8000bf2 <HAL_GPIO_Init+0x4e>
        temp = GPIOx->AFR[position >> 3U];
 8000d40:	08df      	lsrs	r7, r3, #3
 8000d42:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8000d46:	9701      	str	r7, [sp, #4]
 8000d48:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d4a:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8000d4e:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d50:	f003 0e07 	and.w	lr, r3, #7
 8000d54:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000d58:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d5a:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d5e:	fa06 fe0e 	lsl.w	lr, r6, lr
 8000d62:	9e00      	ldr	r6, [sp, #0]
 8000d64:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000d68:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d6a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000d6e:	6237      	str	r7, [r6, #32]
 8000d70:	e73f      	b.n	8000bf2 <HAL_GPIO_Init+0x4e>
        temp = GPIOx->PUPDR;
 8000d72:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d74:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d78:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8000d7c:	fa07 f70c 	lsl.w	r7, r7, ip
 8000d80:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8000d84:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d86:	e734      	b.n	8000bf2 <HAL_GPIO_Init+0x4e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d88:	f04f 0c01 	mov.w	ip, #1
 8000d8c:	fa0c f707 	lsl.w	r7, ip, r7
 8000d90:	433d      	orrs	r5, r7
 8000d92:	e789      	b.n	8000ca8 <HAL_GPIO_Init+0x104>
 8000d94:	f04f 0c02 	mov.w	ip, #2
 8000d98:	fa0c f707 	lsl.w	r7, ip, r7
 8000d9c:	433d      	orrs	r5, r7
 8000d9e:	e783      	b.n	8000ca8 <HAL_GPIO_Init+0x104>
 8000da0:	f04f 0c03 	mov.w	ip, #3
 8000da4:	fa0c f707 	lsl.w	r7, ip, r7
 8000da8:	433d      	orrs	r5, r7
 8000daa:	e77d      	b.n	8000ca8 <HAL_GPIO_Init+0x104>
 8000dac:	f04f 0c04 	mov.w	ip, #4
 8000db0:	fa0c f707 	lsl.w	r7, ip, r7
 8000db4:	433d      	orrs	r5, r7
 8000db6:	e777      	b.n	8000ca8 <HAL_GPIO_Init+0x104>
 8000db8:	f04f 0c07 	mov.w	ip, #7
 8000dbc:	fa0c f707 	lsl.w	r7, ip, r7
 8000dc0:	433d      	orrs	r5, r7
 8000dc2:	e771      	b.n	8000ca8 <HAL_GPIO_Init+0x104>
 8000dc4:	f04f 0c05 	mov.w	ip, #5
 8000dc8:	fa0c f707 	lsl.w	r7, ip, r7
 8000dcc:	433d      	orrs	r5, r7
 8000dce:	e76b      	b.n	8000ca8 <HAL_GPIO_Init+0x104>
 8000dd0:	f04f 0c06 	mov.w	ip, #6
 8000dd4:	fa0c f707 	lsl.w	r7, ip, r7
 8000dd8:	433d      	orrs	r5, r7
 8000dda:	e765      	b.n	8000ca8 <HAL_GPIO_Init+0x104>
 8000ddc:	f04f 0c08 	mov.w	ip, #8
 8000de0:	fa0c f707 	lsl.w	r7, ip, r7
 8000de4:	433d      	orrs	r5, r7
 8000de6:	e75f      	b.n	8000ca8 <HAL_GPIO_Init+0x104>
 8000de8:	40020000 	.word	0x40020000
 8000dec:	40020800 	.word	0x40020800
 8000df0:	40013c00 	.word	0x40013c00
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020c00 	.word	0x40020c00
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40021400 	.word	0x40021400
 8000e04:	40021800 	.word	0x40021800
 8000e08:	40021c00 	.word	0x40021c00
 8000e0c:	40022000 	.word	0x40022000
 8000e10:	40022400 	.word	0x40022400

08000e14 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e14:	b902      	cbnz	r2, 8000e18 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e16:	0409      	lsls	r1, r1, #16
 8000e18:	6181      	str	r1, [r0, #24]
  }
}
 8000e1a:	4770      	bx	lr

08000e1c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	f000 81d8 	beq.w	80011d2 <HAL_RCC_OscConfig+0x3b6>
{
 8000e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e26:	6803      	ldr	r3, [r0, #0]
 8000e28:	07dd      	lsls	r5, r3, #31
{
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e2e:	d52f      	bpl.n	8000e90 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e30:	499d      	ldr	r1, [pc, #628]	@ (80010a8 <HAL_RCC_OscConfig+0x28c>)
 8000e32:	688a      	ldr	r2, [r1, #8]
 8000e34:	f002 020c 	and.w	r2, r2, #12
 8000e38:	2a04      	cmp	r2, #4
 8000e3a:	f000 80ec 	beq.w	8001016 <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e3e:	688a      	ldr	r2, [r1, #8]
 8000e40:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e44:	2a08      	cmp	r2, #8
 8000e46:	f000 80e2 	beq.w	800100e <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e4a:	6863      	ldr	r3, [r4, #4]
 8000e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e50:	f000 80eb 	beq.w	800102a <HAL_RCC_OscConfig+0x20e>
 8000e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e58:	f000 8173 	beq.w	8001142 <HAL_RCC_OscConfig+0x326>
 8000e5c:	4d92      	ldr	r5, [pc, #584]	@ (80010a8 <HAL_RCC_OscConfig+0x28c>)
 8000e5e:	682a      	ldr	r2, [r5, #0]
 8000e60:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000e64:	602a      	str	r2, [r5, #0]
 8000e66:	682a      	ldr	r2, [r5, #0]
 8000e68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000e6c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f040 80e0 	bne.w	8001034 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e74:	f7ff fe28 	bl	8000ac8 <HAL_GetTick>
 8000e78:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7a:	e005      	b.n	8000e88 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e7c:	f7ff fe24 	bl	8000ac8 <HAL_GetTick>
 8000e80:	1b80      	subs	r0, r0, r6
 8000e82:	2864      	cmp	r0, #100	@ 0x64
 8000e84:	f200 8100 	bhi.w	8001088 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	039f      	lsls	r7, r3, #14
 8000e8c:	d4f6      	bmi.n	8000e7c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e8e:	6823      	ldr	r3, [r4, #0]
 8000e90:	079d      	lsls	r5, r3, #30
 8000e92:	d528      	bpl.n	8000ee6 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e94:	4a84      	ldr	r2, [pc, #528]	@ (80010a8 <HAL_RCC_OscConfig+0x28c>)
 8000e96:	6891      	ldr	r1, [r2, #8]
 8000e98:	f011 0f0c 	tst.w	r1, #12
 8000e9c:	f000 809b 	beq.w	8000fd6 <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ea0:	6891      	ldr	r1, [r2, #8]
 8000ea2:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ea6:	2908      	cmp	r1, #8
 8000ea8:	f000 8091 	beq.w	8000fce <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000eac:	68e3      	ldr	r3, [r4, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 810c 	beq.w	80010cc <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eb4:	4b7d      	ldr	r3, [pc, #500]	@ (80010ac <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb6:	4e7c      	ldr	r6, [pc, #496]	@ (80010a8 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8000eb8:	2201      	movs	r2, #1
 8000eba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fe04 	bl	8000ac8 <HAL_GetTick>
 8000ec0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ec2:	e005      	b.n	8000ed0 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ec4:	f7ff fe00 	bl	8000ac8 <HAL_GetTick>
 8000ec8:	1b40      	subs	r0, r0, r5
 8000eca:	2802      	cmp	r0, #2
 8000ecc:	f200 80dc 	bhi.w	8001088 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed0:	6833      	ldr	r3, [r6, #0]
 8000ed2:	079f      	lsls	r7, r3, #30
 8000ed4:	d5f6      	bpl.n	8000ec4 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed6:	6833      	ldr	r3, [r6, #0]
 8000ed8:	6922      	ldr	r2, [r4, #16]
 8000eda:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000ede:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ee2:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ee4:	6823      	ldr	r3, [r4, #0]
 8000ee6:	071a      	lsls	r2, r3, #28
 8000ee8:	d45c      	bmi.n	8000fa4 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eea:	075d      	lsls	r5, r3, #29
 8000eec:	d53a      	bpl.n	8000f64 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eee:	4a6e      	ldr	r2, [pc, #440]	@ (80010a8 <HAL_RCC_OscConfig+0x28c>)
 8000ef0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000ef2:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8000ef6:	f040 8088 	bne.w	800100a <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f04:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f0e:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f10:	4e67      	ldr	r6, [pc, #412]	@ (80010b0 <HAL_RCC_OscConfig+0x294>)
 8000f12:	6833      	ldr	r3, [r6, #0]
 8000f14:	05d8      	lsls	r0, r3, #23
 8000f16:	f140 80a7 	bpl.w	8001068 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f1a:	68a3      	ldr	r3, [r4, #8]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	f000 80b7 	beq.w	8001090 <HAL_RCC_OscConfig+0x274>
 8000f22:	2b05      	cmp	r3, #5
 8000f24:	f000 811d 	beq.w	8001162 <HAL_RCC_OscConfig+0x346>
 8000f28:	4e5f      	ldr	r6, [pc, #380]	@ (80010a8 <HAL_RCC_OscConfig+0x28c>)
 8000f2a:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8000f2c:	f022 0201 	bic.w	r2, r2, #1
 8000f30:	6732      	str	r2, [r6, #112]	@ 0x70
 8000f32:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8000f34:	f022 0204 	bic.w	r2, r2, #4
 8000f38:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f040 80ad 	bne.w	800109a <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f40:	f7ff fdc2 	bl	8000ac8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f44:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8000f48:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f4a:	e005      	b.n	8000f58 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f4c:	f7ff fdbc 	bl	8000ac8 <HAL_GetTick>
 8000f50:	1bc0      	subs	r0, r0, r7
 8000f52:	4540      	cmp	r0, r8
 8000f54:	f200 8098 	bhi.w	8001088 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f58:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8000f5a:	079b      	lsls	r3, r3, #30
 8000f5c:	d4f6      	bmi.n	8000f4c <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f5e:	2d00      	cmp	r5, #0
 8000f60:	f040 80f9 	bne.w	8001156 <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f64:	69a3      	ldr	r3, [r4, #24]
 8000f66:	b1cb      	cbz	r3, 8000f9c <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f68:	4d4f      	ldr	r5, [pc, #316]	@ (80010a8 <HAL_RCC_OscConfig+0x28c>)
 8000f6a:	68aa      	ldr	r2, [r5, #8]
 8000f6c:	f002 020c 	and.w	r2, r2, #12
 8000f70:	2a08      	cmp	r2, #8
 8000f72:	f000 80bc 	beq.w	80010ee <HAL_RCC_OscConfig+0x2d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f76:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f78:	4b4c      	ldr	r3, [pc, #304]	@ (80010ac <HAL_RCC_OscConfig+0x290>)
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f80:	f000 80f9 	beq.w	8001176 <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f84:	f7ff fda0 	bl	8000ac8 <HAL_GetTick>
 8000f88:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f8a:	e004      	b.n	8000f96 <HAL_RCC_OscConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f8c:	f7ff fd9c 	bl	8000ac8 <HAL_GetTick>
 8000f90:	1b00      	subs	r0, r0, r4
 8000f92:	2802      	cmp	r0, #2
 8000f94:	d878      	bhi.n	8001088 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f96:	682b      	ldr	r3, [r5, #0]
 8000f98:	019b      	lsls	r3, r3, #6
 8000f9a:	d4f7      	bmi.n	8000f8c <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000f9c:	2000      	movs	r0, #0
}
 8000f9e:	b002      	add	sp, #8
 8000fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000fa4:	6963      	ldr	r3, [r4, #20]
 8000fa6:	b1fb      	cbz	r3, 8000fe8 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8000fa8:	4b40      	ldr	r3, [pc, #256]	@ (80010ac <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000faa:	4e3f      	ldr	r6, [pc, #252]	@ (80010a8 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8000fac:	2201      	movs	r2, #1
 8000fae:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8000fb2:	f7ff fd89 	bl	8000ac8 <HAL_GetTick>
 8000fb6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb8:	e004      	b.n	8000fc4 <HAL_RCC_OscConfig+0x1a8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fba:	f7ff fd85 	bl	8000ac8 <HAL_GetTick>
 8000fbe:	1b40      	subs	r0, r0, r5
 8000fc0:	2802      	cmp	r0, #2
 8000fc2:	d861      	bhi.n	8001088 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fc4:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8000fc6:	079b      	lsls	r3, r3, #30
 8000fc8:	d5f7      	bpl.n	8000fba <HAL_RCC_OscConfig+0x19e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fca:	6823      	ldr	r3, [r4, #0]
 8000fcc:	e78d      	b.n	8000eea <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fce:	6852      	ldr	r2, [r2, #4]
 8000fd0:	0251      	lsls	r1, r2, #9
 8000fd2:	f53f af6b 	bmi.w	8000eac <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd6:	4a34      	ldr	r2, [pc, #208]	@ (80010a8 <HAL_RCC_OscConfig+0x28c>)
 8000fd8:	6812      	ldr	r2, [r2, #0]
 8000fda:	0792      	lsls	r2, r2, #30
 8000fdc:	d538      	bpl.n	8001050 <HAL_RCC_OscConfig+0x234>
 8000fde:	68e2      	ldr	r2, [r4, #12]
 8000fe0:	2a01      	cmp	r2, #1
 8000fe2:	d035      	beq.n	8001050 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	e7da      	b.n	8000f9e <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 8000fe8:	4a30      	ldr	r2, [pc, #192]	@ (80010ac <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fea:	4e2f      	ldr	r6, [pc, #188]	@ (80010a8 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 8000fec:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8000ff0:	f7ff fd6a 	bl	8000ac8 <HAL_GetTick>
 8000ff4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff6:	e004      	b.n	8001002 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ff8:	f7ff fd66 	bl	8000ac8 <HAL_GetTick>
 8000ffc:	1b40      	subs	r0, r0, r5
 8000ffe:	2802      	cmp	r0, #2
 8001000:	d842      	bhi.n	8001088 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001002:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001004:	079f      	lsls	r7, r3, #30
 8001006:	d4f7      	bmi.n	8000ff8 <HAL_RCC_OscConfig+0x1dc>
 8001008:	e7df      	b.n	8000fca <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 800100a:	2500      	movs	r5, #0
 800100c:	e780      	b.n	8000f10 <HAL_RCC_OscConfig+0xf4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800100e:	684a      	ldr	r2, [r1, #4]
 8001010:	0251      	lsls	r1, r2, #9
 8001012:	f57f af1a 	bpl.w	8000e4a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001016:	4a24      	ldr	r2, [pc, #144]	@ (80010a8 <HAL_RCC_OscConfig+0x28c>)
 8001018:	6812      	ldr	r2, [r2, #0]
 800101a:	0392      	lsls	r2, r2, #14
 800101c:	f57f af38 	bpl.w	8000e90 <HAL_RCC_OscConfig+0x74>
 8001020:	6862      	ldr	r2, [r4, #4]
 8001022:	2a00      	cmp	r2, #0
 8001024:	f47f af34 	bne.w	8000e90 <HAL_RCC_OscConfig+0x74>
 8001028:	e7dc      	b.n	8000fe4 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800102a:	4a1f      	ldr	r2, [pc, #124]	@ (80010a8 <HAL_RCC_OscConfig+0x28c>)
 800102c:	6813      	ldr	r3, [r2, #0]
 800102e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001032:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001034:	f7ff fd48 	bl	8000ac8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001038:	4e1b      	ldr	r6, [pc, #108]	@ (80010a8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800103a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103c:	e004      	b.n	8001048 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800103e:	f7ff fd43 	bl	8000ac8 <HAL_GetTick>
 8001042:	1b40      	subs	r0, r0, r5
 8001044:	2864      	cmp	r0, #100	@ 0x64
 8001046:	d81f      	bhi.n	8001088 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001048:	6833      	ldr	r3, [r6, #0]
 800104a:	039b      	lsls	r3, r3, #14
 800104c:	d5f7      	bpl.n	800103e <HAL_RCC_OscConfig+0x222>
 800104e:	e71e      	b.n	8000e8e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001050:	4915      	ldr	r1, [pc, #84]	@ (80010a8 <HAL_RCC_OscConfig+0x28c>)
 8001052:	6920      	ldr	r0, [r4, #16]
 8001054:	680a      	ldr	r2, [r1, #0]
 8001056:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 800105a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800105e:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001060:	071a      	lsls	r2, r3, #28
 8001062:	f57f af42 	bpl.w	8000eea <HAL_RCC_OscConfig+0xce>
 8001066:	e79d      	b.n	8000fa4 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001068:	6833      	ldr	r3, [r6, #0]
 800106a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800106e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001070:	f7ff fd2a 	bl	8000ac8 <HAL_GetTick>
 8001074:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001076:	6833      	ldr	r3, [r6, #0]
 8001078:	05d9      	lsls	r1, r3, #23
 800107a:	f53f af4e 	bmi.w	8000f1a <HAL_RCC_OscConfig+0xfe>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800107e:	f7ff fd23 	bl	8000ac8 <HAL_GetTick>
 8001082:	1bc0      	subs	r0, r0, r7
 8001084:	2802      	cmp	r0, #2
 8001086:	d9f6      	bls.n	8001076 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8001088:	2003      	movs	r0, #3
}
 800108a:	b002      	add	sp, #8
 800108c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001090:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <HAL_RCC_OscConfig+0x28c>)
 8001092:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800109a:	f7ff fd15 	bl	8000ac8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800109e:	4f02      	ldr	r7, [pc, #8]	@ (80010a8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80010a0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a2:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a6:	e00a      	b.n	80010be <HAL_RCC_OscConfig+0x2a2>
 80010a8:	40023800 	.word	0x40023800
 80010ac:	42470000 	.word	0x42470000
 80010b0:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010b4:	f7ff fd08 	bl	8000ac8 <HAL_GetTick>
 80010b8:	1b80      	subs	r0, r0, r6
 80010ba:	4540      	cmp	r0, r8
 80010bc:	d8e4      	bhi.n	8001088 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010c0:	079a      	lsls	r2, r3, #30
 80010c2:	d5f7      	bpl.n	80010b4 <HAL_RCC_OscConfig+0x298>
    if(pwrclkchanged == SET)
 80010c4:	2d00      	cmp	r5, #0
 80010c6:	f43f af4d 	beq.w	8000f64 <HAL_RCC_OscConfig+0x148>
 80010ca:	e044      	b.n	8001156 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 80010cc:	4a42      	ldr	r2, [pc, #264]	@ (80011d8 <HAL_RCC_OscConfig+0x3bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ce:	4e43      	ldr	r6, [pc, #268]	@ (80011dc <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 80010d0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80010d2:	f7ff fcf9 	bl	8000ac8 <HAL_GetTick>
 80010d6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d8:	e004      	b.n	80010e4 <HAL_RCC_OscConfig+0x2c8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010da:	f7ff fcf5 	bl	8000ac8 <HAL_GetTick>
 80010de:	1b40      	subs	r0, r0, r5
 80010e0:	2802      	cmp	r0, #2
 80010e2:	d8d1      	bhi.n	8001088 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e4:	6833      	ldr	r3, [r6, #0]
 80010e6:	0799      	lsls	r1, r3, #30
 80010e8:	d4f7      	bmi.n	80010da <HAL_RCC_OscConfig+0x2be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ea:	6823      	ldr	r3, [r4, #0]
 80010ec:	e6fb      	b.n	8000ee6 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	f43f af78 	beq.w	8000fe4 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 80010f4:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010f6:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f8:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010fc:	4291      	cmp	r1, r2
 80010fe:	f47f af71 	bne.w	8000fe4 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001102:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001104:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001108:	4291      	cmp	r1, r2
 800110a:	f47f af6b 	bne.w	8000fe4 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800110e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001110:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001114:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001116:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800111a:	f47f af63 	bne.w	8000fe4 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800111e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001120:	0852      	lsrs	r2, r2, #1
 8001122:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001126:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001128:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800112c:	f47f af5a 	bne.w	8000fe4 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001130:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001132:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001136:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800113a:	bf14      	ite	ne
 800113c:	2001      	movne	r0, #1
 800113e:	2000      	moveq	r0, #0
 8001140:	e72d      	b.n	8000f9e <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001142:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <HAL_RCC_OscConfig+0x3c0>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001152:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001154:	e76e      	b.n	8001034 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001156:	4a21      	ldr	r2, [pc, #132]	@ (80011dc <HAL_RCC_OscConfig+0x3c0>)
 8001158:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800115a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001160:	e700      	b.n	8000f64 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001162:	4b1e      	ldr	r3, [pc, #120]	@ (80011dc <HAL_RCC_OscConfig+0x3c0>)
 8001164:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001166:	f042 0204 	orr.w	r2, r2, #4
 800116a:	671a      	str	r2, [r3, #112]	@ 0x70
 800116c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800116e:	f042 0201 	orr.w	r2, r2, #1
 8001172:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001174:	e791      	b.n	800109a <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8001176:	f7ff fca7 	bl	8000ac8 <HAL_GetTick>
 800117a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800117c:	e005      	b.n	800118a <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800117e:	f7ff fca3 	bl	8000ac8 <HAL_GetTick>
 8001182:	1b80      	subs	r0, r0, r6
 8001184:	2802      	cmp	r0, #2
 8001186:	f63f af7f 	bhi.w	8001088 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800118a:	682b      	ldr	r3, [r5, #0]
 800118c:	0199      	lsls	r1, r3, #6
 800118e:	d4f6      	bmi.n	800117e <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001190:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8001194:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001196:	430b      	orrs	r3, r1
 8001198:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800119c:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 80011a0:	0852      	lsrs	r2, r2, #1
 80011a2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80011a6:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80011a8:	490b      	ldr	r1, [pc, #44]	@ (80011d8 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80011ae:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011b0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80011b2:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80011b4:	f7ff fc88 	bl	8000ac8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011b8:	4d08      	ldr	r5, [pc, #32]	@ (80011dc <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 80011ba:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011bc:	e005      	b.n	80011ca <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011be:	f7ff fc83 	bl	8000ac8 <HAL_GetTick>
 80011c2:	1b00      	subs	r0, r0, r4
 80011c4:	2802      	cmp	r0, #2
 80011c6:	f63f af5f 	bhi.w	8001088 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ca:	682b      	ldr	r3, [r5, #0]
 80011cc:	019a      	lsls	r2, r3, #6
 80011ce:	d5f6      	bpl.n	80011be <HAL_RCC_OscConfig+0x3a2>
 80011d0:	e6e4      	b.n	8000f9c <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 80011d2:	2001      	movs	r0, #1
}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	42470000 	.word	0x42470000
 80011dc:	40023800 	.word	0x40023800

080011e0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011e0:	4916      	ldr	r1, [pc, #88]	@ (800123c <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80011e2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011e4:	688b      	ldr	r3, [r1, #8]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	d01b      	beq.n	8001226 <HAL_RCC_GetSysClockFreq+0x46>
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d117      	bne.n	8001222 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011f2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011f4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011f6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011f8:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011fc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001200:	d113      	bne.n	800122a <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001202:	480f      	ldr	r0, [pc, #60]	@ (8001240 <HAL_RCC_GetSysClockFreq+0x60>)
 8001204:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001208:	fba1 0100 	umull	r0, r1, r1, r0
 800120c:	f7fe ffee 	bl	80001ec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001210:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <HAL_RCC_GetSysClockFreq+0x5c>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001218:	3301      	adds	r3, #1
 800121a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800121c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001220:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001222:	4807      	ldr	r0, [pc, #28]	@ (8001240 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8001224:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001226:	4807      	ldr	r0, [pc, #28]	@ (8001244 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001228:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800122a:	4806      	ldr	r0, [pc, #24]	@ (8001244 <HAL_RCC_GetSysClockFreq+0x64>)
 800122c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001230:	2300      	movs	r3, #0
 8001232:	fba1 0100 	umull	r0, r1, r1, r0
 8001236:	f7fe ffd9 	bl	80001ec <__aeabi_uldivmod>
 800123a:	e7e9      	b.n	8001210 <HAL_RCC_GetSysClockFreq+0x30>
 800123c:	40023800 	.word	0x40023800
 8001240:	00f42400 	.word	0x00f42400
 8001244:	007a1200 	.word	0x007a1200

08001248 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001248:	2800      	cmp	r0, #0
 800124a:	f000 8087 	beq.w	800135c <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800124e:	4a48      	ldr	r2, [pc, #288]	@ (8001370 <HAL_RCC_ClockConfig+0x128>)
 8001250:	6813      	ldr	r3, [r2, #0]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	428b      	cmp	r3, r1
{
 8001258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800125c:	460d      	mov	r5, r1
 800125e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001260:	d209      	bcs.n	8001276 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001262:	b2cb      	uxtb	r3, r1
 8001264:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001266:	6813      	ldr	r3, [r2, #0]
 8001268:	f003 030f 	and.w	r3, r3, #15
 800126c:	428b      	cmp	r3, r1
 800126e:	d002      	beq.n	8001276 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001270:	2001      	movs	r0, #1
}
 8001272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001276:	6823      	ldr	r3, [r4, #0]
 8001278:	0798      	lsls	r0, r3, #30
 800127a:	d514      	bpl.n	80012a6 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800127c:	0759      	lsls	r1, r3, #29
 800127e:	d504      	bpl.n	800128a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001280:	493c      	ldr	r1, [pc, #240]	@ (8001374 <HAL_RCC_ClockConfig+0x12c>)
 8001282:	688a      	ldr	r2, [r1, #8]
 8001284:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8001288:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800128a:	071a      	lsls	r2, r3, #28
 800128c:	d504      	bpl.n	8001298 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800128e:	4939      	ldr	r1, [pc, #228]	@ (8001374 <HAL_RCC_ClockConfig+0x12c>)
 8001290:	688a      	ldr	r2, [r1, #8]
 8001292:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8001296:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001298:	4936      	ldr	r1, [pc, #216]	@ (8001374 <HAL_RCC_ClockConfig+0x12c>)
 800129a:	68a0      	ldr	r0, [r4, #8]
 800129c:	688a      	ldr	r2, [r1, #8]
 800129e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80012a2:	4302      	orrs	r2, r0
 80012a4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012a6:	07df      	lsls	r7, r3, #31
 80012a8:	d521      	bpl.n	80012ee <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012aa:	6862      	ldr	r2, [r4, #4]
 80012ac:	2a01      	cmp	r2, #1
 80012ae:	d057      	beq.n	8001360 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012b0:	1e93      	subs	r3, r2, #2
 80012b2:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001374 <HAL_RCC_ClockConfig+0x12c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012b8:	d94d      	bls.n	8001356 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ba:	0799      	lsls	r1, r3, #30
 80012bc:	d5d8      	bpl.n	8001270 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012be:	4e2d      	ldr	r6, [pc, #180]	@ (8001374 <HAL_RCC_ClockConfig+0x12c>)
 80012c0:	68b3      	ldr	r3, [r6, #8]
 80012c2:	f023 0303 	bic.w	r3, r3, #3
 80012c6:	4313      	orrs	r3, r2
 80012c8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80012ca:	f7ff fbfd 	bl	8000ac8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ce:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80012d2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d4:	e004      	b.n	80012e0 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d6:	f7ff fbf7 	bl	8000ac8 <HAL_GetTick>
 80012da:	1bc0      	subs	r0, r0, r7
 80012dc:	4540      	cmp	r0, r8
 80012de:	d844      	bhi.n	800136a <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e0:	68b3      	ldr	r3, [r6, #8]
 80012e2:	6862      	ldr	r2, [r4, #4]
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012ec:	d1f3      	bne.n	80012d6 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012ee:	4a20      	ldr	r2, [pc, #128]	@ (8001370 <HAL_RCC_ClockConfig+0x128>)
 80012f0:	6813      	ldr	r3, [r2, #0]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	42ab      	cmp	r3, r5
 80012f8:	d906      	bls.n	8001308 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fa:	b2eb      	uxtb	r3, r5
 80012fc:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fe:	6813      	ldr	r3, [r2, #0]
 8001300:	f003 030f 	and.w	r3, r3, #15
 8001304:	42ab      	cmp	r3, r5
 8001306:	d1b3      	bne.n	8001270 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001308:	6823      	ldr	r3, [r4, #0]
 800130a:	075a      	lsls	r2, r3, #29
 800130c:	d506      	bpl.n	800131c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800130e:	4919      	ldr	r1, [pc, #100]	@ (8001374 <HAL_RCC_ClockConfig+0x12c>)
 8001310:	68e0      	ldr	r0, [r4, #12]
 8001312:	688a      	ldr	r2, [r1, #8]
 8001314:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8001318:	4302      	orrs	r2, r0
 800131a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800131c:	071b      	lsls	r3, r3, #28
 800131e:	d507      	bpl.n	8001330 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001320:	4a14      	ldr	r2, [pc, #80]	@ (8001374 <HAL_RCC_ClockConfig+0x12c>)
 8001322:	6921      	ldr	r1, [r4, #16]
 8001324:	6893      	ldr	r3, [r2, #8]
 8001326:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800132a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800132e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001330:	f7ff ff56 	bl	80011e0 <HAL_RCC_GetSysClockFreq>
 8001334:	4a0f      	ldr	r2, [pc, #60]	@ (8001374 <HAL_RCC_ClockConfig+0x12c>)
 8001336:	4c10      	ldr	r4, [pc, #64]	@ (8001378 <HAL_RCC_ClockConfig+0x130>)
 8001338:	6892      	ldr	r2, [r2, #8]
 800133a:	4910      	ldr	r1, [pc, #64]	@ (800137c <HAL_RCC_ClockConfig+0x134>)
 800133c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001340:	4603      	mov	r3, r0
 8001342:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8001344:	480e      	ldr	r0, [pc, #56]	@ (8001380 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001346:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8001348:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800134a:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 800134c:	f7ff fb72 	bl	8000a34 <HAL_InitTick>
  return HAL_OK;
 8001350:	2000      	movs	r0, #0
}
 8001352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001356:	0198      	lsls	r0, r3, #6
 8001358:	d4b1      	bmi.n	80012be <HAL_RCC_ClockConfig+0x76>
 800135a:	e789      	b.n	8001270 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800135c:	2001      	movs	r0, #1
}
 800135e:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <HAL_RCC_ClockConfig+0x12c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	039e      	lsls	r6, r3, #14
 8001366:	d4aa      	bmi.n	80012be <HAL_RCC_ClockConfig+0x76>
 8001368:	e782      	b.n	8001270 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800136a:	2003      	movs	r0, #3
 800136c:	e781      	b.n	8001272 <HAL_RCC_ClockConfig+0x2a>
 800136e:	bf00      	nop
 8001370:	40023c00 	.word	0x40023c00
 8001374:	40023800 	.word	0x40023800
 8001378:	08001684 	.word	0x08001684
 800137c:	20000014 	.word	0x20000014
 8001380:	2000001c 	.word	0x2000001c

08001384 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001388:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800138a:	f890 003d 	ldrb.w	r0, [r0, #61]	@ 0x3d
 800138e:	2820      	cmp	r0, #32
 8001390:	d17a      	bne.n	8001488 <HAL_UART_Transmit+0x104>
  {
    if ((pData == NULL) || (Size == 0U))
 8001392:	4688      	mov	r8, r1
 8001394:	2900      	cmp	r1, #0
 8001396:	d03f      	beq.n	8001418 <HAL_UART_Transmit+0x94>
 8001398:	4617      	mov	r7, r2
 800139a:	2a00      	cmp	r2, #0
 800139c:	d03c      	beq.n	8001418 <HAL_UART_Transmit+0x94>
 800139e:	461d      	mov	r5, r3
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80013a0:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d06f      	beq.n	8001488 <HAL_UART_Transmit+0x104>
 80013a8:	2301      	movs	r3, #1
 80013aa:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013ae:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013b2:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013b4:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013b8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80013bc:	f7ff fb84 	bl	8000ac8 <HAL_GetTick>

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013c0:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 80013c2:	84a7      	strh	r7, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 80013c8:	84e7      	strh	r7, [r4, #38]	@ 0x26
    tickstart = HAL_GetTick();
 80013ca:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013cc:	d06a      	beq.n	80014a4 <HAL_UART_Transmit+0x120>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    while (huart->TxXferCount > 0U)
 80013ce:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
    __HAL_UNLOCK(huart);
 80013d0:	2300      	movs	r3, #0
    while (huart->TxXferCount > 0U)
 80013d2:	b292      	uxth	r2, r2
    __HAL_UNLOCK(huart);
 80013d4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80013d8:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 80013da:	b192      	cbz	r2, 8001402 <HAL_UART_Transmit+0x7e>
 80013dc:	1c69      	adds	r1, r5, #1
 80013de:	d125      	bne.n	800142c <HAL_UART_Transmit+0xa8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	0612      	lsls	r2, r2, #24
 80013e4:	d5fc      	bpl.n	80013e0 <HAL_UART_Transmit+0x5c>
      if (pdata8bits == NULL)
 80013e6:	f1b8 0f00 	cmp.w	r8, #0
 80013ea:	d025      	beq.n	8001438 <HAL_UART_Transmit+0xb4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80013ec:	f818 2b01 	ldrb.w	r2, [r8], #1
 80013f0:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 80013f2:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80013f4:	3a01      	subs	r2, #1
 80013f6:	b292      	uxth	r2, r2
 80013f8:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80013fa:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80013fc:	b292      	uxth	r2, r2
 80013fe:	2a00      	cmp	r2, #0
 8001400:	d1ec      	bne.n	80013dc <HAL_UART_Transmit+0x58>
 8001402:	1c68      	adds	r0, r5, #1
 8001404:	d14a      	bne.n	800149c <HAL_UART_Transmit+0x118>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	0651      	lsls	r1, r2, #25
 800140a:	d5fc      	bpl.n	8001406 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800140c:	2320      	movs	r3, #32
 800140e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_OK;
 8001412:	2000      	movs	r0, #0
}
 8001414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8001418:	2001      	movs	r0, #1
}
 800141a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800141e:	b185      	cbz	r5, 8001442 <HAL_UART_Transmit+0xbe>
 8001420:	f7ff fb52 	bl	8000ac8 <HAL_GetTick>
 8001424:	1b80      	subs	r0, r0, r6
 8001426:	4285      	cmp	r5, r0
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001428:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800142a:	d30a      	bcc.n	8001442 <HAL_UART_Transmit+0xbe>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	0617      	lsls	r7, r2, #24
 8001430:	d5f5      	bpl.n	800141e <HAL_UART_Transmit+0x9a>
      if (pdata8bits == NULL)
 8001432:	f1b8 0f00 	cmp.w	r8, #0
 8001436:	d1d9      	bne.n	80013ec <HAL_UART_Transmit+0x68>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001438:	f839 2b02 	ldrh.w	r2, [r9], #2
 800143c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001440:	e7d6      	b.n	80013f0 <HAL_UART_Transmit+0x6c>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001442:	f103 020c 	add.w	r2, r3, #12
 8001446:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800144a:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800144e:	f103 000c 	add.w	r0, r3, #12
 8001452:	e840 2100 	strex	r1, r2, [r0]
 8001456:	2900      	cmp	r1, #0
 8001458:	d1f3      	bne.n	8001442 <HAL_UART_Transmit+0xbe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800145a:	f103 0214 	add.w	r2, r3, #20
 800145e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001462:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001466:	f103 0014 	add.w	r0, r3, #20
 800146a:	e840 2100 	strex	r1, r2, [r0]
 800146e:	2900      	cmp	r1, #0
 8001470:	d1f3      	bne.n	800145a <HAL_UART_Transmit+0xd6>

        huart->gState  = HAL_UART_STATE_READY;
 8001472:	2320      	movs	r3, #32
 8001474:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001478:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800147c:	2300      	movs	r3, #0
 800147e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_TIMEOUT;
 8001482:	2003      	movs	r0, #3
}
 8001484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(huart);
 8001488:	2002      	movs	r0, #2
}
 800148a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800148e:	b17d      	cbz	r5, 80014b0 <HAL_UART_Transmit+0x12c>
 8001490:	f7ff fb1a 	bl	8000ac8 <HAL_GetTick>
 8001494:	1b83      	subs	r3, r0, r6
 8001496:	429d      	cmp	r5, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001498:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800149a:	d309      	bcc.n	80014b0 <HAL_UART_Transmit+0x12c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	0652      	lsls	r2, r2, #25
 80014a0:	d5f5      	bpl.n	800148e <HAL_UART_Transmit+0x10a>
 80014a2:	e7b3      	b.n	800140c <HAL_UART_Transmit+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014a4:	6923      	ldr	r3, [r4, #16]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d191      	bne.n	80013ce <HAL_UART_Transmit+0x4a>
 80014aa:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 80014ac:	4698      	mov	r8, r3
 80014ae:	e78e      	b.n	80013ce <HAL_UART_Transmit+0x4a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014b0:	f103 020c 	add.w	r2, r3, #12
 80014b4:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014b8:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014bc:	f103 000c 	add.w	r0, r3, #12
 80014c0:	e840 2100 	strex	r1, r2, [r0]
 80014c4:	2900      	cmp	r1, #0
 80014c6:	d1f3      	bne.n	80014b0 <HAL_UART_Transmit+0x12c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014c8:	f103 0214 	add.w	r2, r3, #20
 80014cc:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014d0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014d4:	f103 0014 	add.w	r0, r3, #20
 80014d8:	e840 2100 	strex	r1, r2, [r0]
 80014dc:	2900      	cmp	r1, #0
 80014de:	d1f3      	bne.n	80014c8 <HAL_UART_Transmit+0x144>
 80014e0:	e7c7      	b.n	8001472 <HAL_UART_Transmit+0xee>
 80014e2:	bf00      	nop

080014e4 <HAL_UART_Receive>:
{
 80014e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014e8:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80014ea:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 80014ee:	2820      	cmp	r0, #32
 80014f0:	f040 8086 	bne.w	8001600 <HAL_UART_Receive+0x11c>
    if ((pData == NULL) || (Size == 0U))
 80014f4:	4688      	mov	r8, r1
 80014f6:	2900      	cmp	r1, #0
 80014f8:	d046      	beq.n	8001588 <HAL_UART_Receive+0xa4>
 80014fa:	4616      	mov	r6, r2
 80014fc:	2a00      	cmp	r2, #0
 80014fe:	d043      	beq.n	8001588 <HAL_UART_Receive+0xa4>
 8001500:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8001502:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001506:	2b01      	cmp	r3, #1
 8001508:	d07a      	beq.n	8001600 <HAL_UART_Receive+0x11c>
 800150a:	2301      	movs	r3, #1
 800150c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001510:	f04f 0900 	mov.w	r9, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001514:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001516:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800151a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800151e:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
    tickstart = HAL_GetTick();
 8001522:	f7ff fad1 	bl	8000ac8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001526:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8001528:	85a6      	strh	r6, [r4, #44]	@ 0x2c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800152a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->RxXferCount = Size;
 800152e:	85e6      	strh	r6, [r4, #46]	@ 0x2e
    tickstart = HAL_GetTick();
 8001530:	4605      	mov	r5, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001532:	d068      	beq.n	8001606 <HAL_UART_Receive+0x122>
    while (huart->RxXferCount > 0U)
 8001534:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
    __HAL_UNLOCK(huart);
 8001536:	2200      	movs	r2, #0
    while (huart->RxXferCount > 0U)
 8001538:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800153a:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    while (huart->RxXferCount > 0U)
 800153e:	b1eb      	cbz	r3, 800157c <HAL_UART_Receive+0x98>
 8001540:	1c78      	adds	r0, r7, #1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	d12a      	bne.n	800159c <HAL_UART_Receive+0xb8>
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	0691      	lsls	r1, r2, #26
 800154a:	d5fc      	bpl.n	8001546 <HAL_UART_Receive+0x62>
      if (pdata8bits == NULL)
 800154c:	f1b8 0f00 	cmp.w	r8, #0
 8001550:	d02a      	beq.n	80015a8 <HAL_UART_Receive+0xc4>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001552:	68a2      	ldr	r2, [r4, #8]
 8001554:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8001558:	d004      	beq.n	8001564 <HAL_UART_Receive+0x80>
 800155a:	2a00      	cmp	r2, #0
 800155c:	d14c      	bne.n	80015f8 <HAL_UART_Receive+0x114>
 800155e:	6922      	ldr	r2, [r4, #16]
 8001560:	2a00      	cmp	r2, #0
 8001562:	d149      	bne.n	80015f8 <HAL_UART_Receive+0x114>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f808 3b01 	strb.w	r3, [r8], #1
      huart->RxXferCount--;
 800156c:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
 800156e:	3a01      	subs	r2, #1
 8001570:	b292      	uxth	r2, r2
 8001572:	85e2      	strh	r2, [r4, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001574:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8001576:	b29b      	uxth	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1e1      	bne.n	8001540 <HAL_UART_Receive+0x5c>
    huart->RxState = HAL_UART_STATE_READY;
 800157c:	2320      	movs	r3, #32
 800157e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8001582:	2000      	movs	r0, #0
}
 8001584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8001588:	2001      	movs	r0, #1
}
 800158a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800158e:	b18f      	cbz	r7, 80015b4 <HAL_UART_Receive+0xd0>
 8001590:	f7ff fa9a 	bl	8000ac8 <HAL_GetTick>
 8001594:	1b40      	subs	r0, r0, r5
 8001596:	4287      	cmp	r7, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001598:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800159a:	d30b      	bcc.n	80015b4 <HAL_UART_Receive+0xd0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	0692      	lsls	r2, r2, #26
 80015a0:	d5f5      	bpl.n	800158e <HAL_UART_Receive+0xaa>
      if (pdata8bits == NULL)
 80015a2:	f1b8 0f00 	cmp.w	r8, #0
 80015a6:	d1d4      	bne.n	8001552 <HAL_UART_Receive+0x6e>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015ae:	f829 3b02 	strh.w	r3, [r9], #2
        pdata16bits++;
 80015b2:	e7db      	b.n	800156c <HAL_UART_Receive+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015b4:	f103 020c 	add.w	r2, r3, #12
 80015b8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015bc:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015c0:	f103 000c 	add.w	r0, r3, #12
 80015c4:	e840 2100 	strex	r1, r2, [r0]
 80015c8:	2900      	cmp	r1, #0
 80015ca:	d1f3      	bne.n	80015b4 <HAL_UART_Receive+0xd0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015cc:	f103 0214 	add.w	r2, r3, #20
 80015d0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015d4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015d8:	f103 0014 	add.w	r0, r3, #20
 80015dc:	e840 2100 	strex	r1, r2, [r0]
 80015e0:	2900      	cmp	r1, #0
 80015e2:	d1f3      	bne.n	80015cc <HAL_UART_Receive+0xe8>
        huart->gState  = HAL_UART_STATE_READY;
 80015e4:	2320      	movs	r3, #32
 80015e6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(huart);
 80015ea:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 80015ee:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        return HAL_TIMEOUT;
 80015f2:	2003      	movs	r0, #3
}
 80015f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015fe:	e7b3      	b.n	8001568 <HAL_UART_Receive+0x84>
    __HAL_LOCK(huart);
 8001600:	2002      	movs	r0, #2
}
 8001602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001606:	6923      	ldr	r3, [r4, #16]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d193      	bne.n	8001534 <HAL_UART_Receive+0x50>
 800160c:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 800160e:	4698      	mov	r8, r3
 8001610:	e790      	b.n	8001534 <HAL_UART_Receive+0x50>
 8001612:	bf00      	nop

08001614 <memset>:
 8001614:	4402      	add	r2, r0
 8001616:	4603      	mov	r3, r0
 8001618:	4293      	cmp	r3, r2
 800161a:	d100      	bne.n	800161e <memset+0xa>
 800161c:	4770      	bx	lr
 800161e:	f803 1b01 	strb.w	r1, [r3], #1
 8001622:	e7f9      	b.n	8001618 <memset+0x4>

08001624 <__libc_init_array>:
 8001624:	b570      	push	{r4, r5, r6, lr}
 8001626:	4d0d      	ldr	r5, [pc, #52]	@ (800165c <__libc_init_array+0x38>)
 8001628:	4c0d      	ldr	r4, [pc, #52]	@ (8001660 <__libc_init_array+0x3c>)
 800162a:	1b64      	subs	r4, r4, r5
 800162c:	10a4      	asrs	r4, r4, #2
 800162e:	2600      	movs	r6, #0
 8001630:	42a6      	cmp	r6, r4
 8001632:	d109      	bne.n	8001648 <__libc_init_array+0x24>
 8001634:	4d0b      	ldr	r5, [pc, #44]	@ (8001664 <__libc_init_array+0x40>)
 8001636:	4c0c      	ldr	r4, [pc, #48]	@ (8001668 <__libc_init_array+0x44>)
 8001638:	f000 f818 	bl	800166c <_init>
 800163c:	1b64      	subs	r4, r4, r5
 800163e:	10a4      	asrs	r4, r4, #2
 8001640:	2600      	movs	r6, #0
 8001642:	42a6      	cmp	r6, r4
 8001644:	d105      	bne.n	8001652 <__libc_init_array+0x2e>
 8001646:	bd70      	pop	{r4, r5, r6, pc}
 8001648:	f855 3b04 	ldr.w	r3, [r5], #4
 800164c:	4798      	blx	r3
 800164e:	3601      	adds	r6, #1
 8001650:	e7ee      	b.n	8001630 <__libc_init_array+0xc>
 8001652:	f855 3b04 	ldr.w	r3, [r5], #4
 8001656:	4798      	blx	r3
 8001658:	3601      	adds	r6, #1
 800165a:	e7f2      	b.n	8001642 <__libc_init_array+0x1e>
 800165c:	0800169c 	.word	0x0800169c
 8001660:	0800169c 	.word	0x0800169c
 8001664:	0800169c 	.word	0x0800169c
 8001668:	080016a0 	.word	0x080016a0

0800166c <_init>:
 800166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800166e:	bf00      	nop
 8001670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001672:	bc08      	pop	{r3}
 8001674:	469e      	mov	lr, r3
 8001676:	4770      	bx	lr

08001678 <_fini>:
 8001678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800167a:	bf00      	nop
 800167c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800167e:	bc08      	pop	{r3}
 8001680:	469e      	mov	lr, r3
 8001682:	4770      	bx	lr
